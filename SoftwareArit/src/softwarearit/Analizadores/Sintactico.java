
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 25 09:48:18 CST 2020
//----------------------------------------------------

package softwarearit.Analizadores;

import softwarearit.Arbol.Estructura.*;
import softwarearit.Arbol.Expresiones.*;
import softwarearit.Arbol.Expresiones.Logicas.*;
import softwarearit.Arbol.Expresiones.Relacionales.*;
import softwarearit.Arbol.Expresiones.Aritmeticas.*;
import softwarearit.Arbol.Instrucciones.*;
import softwarearit.Arbol.*;
import softwarearit.Frame.Interfaz;
import java_cup.runtime.*;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 25 09:48:18 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\011" +
    "\005\000\002\011\004\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\023\006\000" +
    "\002\023\007\000\002\023\004\000\002\027\007\000\002" +
    "\024\005\000\002\024\004\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\003\000\002\022\011" +
    "\000\002\021\011\000\002\021\010\000\002\020\007\000" +
    "\002\014\007\000\002\015\005\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\017\006\000\002\017" +
    "\005\000\002\017\005\000\002\017\004\000\002\012\005" +
    "\000\002\012\003\000\002\013\011\000\002\013\007\000" +
    "\002\007\005\000\002\007\006\000\002\004\006\000\002" +
    "\004\007\000\002\030\005\000\002\030\004\000\002\031" +
    "\005\000\002\031\003\000\002\032\003\000\002\032\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\004\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\005\000\002\003\007\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\044\004\011\005\041\006\010\007\004\010" +
    "\027\012\030\031\013\040\034\044\006\046\016\051\014" +
    "\052\017\053\042\055\036\056\015\057\012\061\037\001" +
    "\002\000\122\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\061\uffb5\001\002\000\054\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\031\ufff4\035" +
    "\ufff4\040\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\061\ufff4\001" +
    "\002\000\004\040\223\001\002\000\056\002\uffd4\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\031\uffd4\035" +
    "\uffd4\040\uffd4\044\uffd4\045\214\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4\061" +
    "\uffd4\001\002\000\122\002\uffb6\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\061\uffb6\001\002\000\112\002\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\173\027\uffb1\030" +
    "\uffb1\031\uffb1\035\uffb1\040\uffb1\043\uffb1\044\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\061\uffb1\001\002\000\006\032\167\040\166" +
    "\001\002\000\022\004\046\005\041\006\010\007\004\010" +
    "\027\012\030\031\013\040\034\001\002\000\004\040\161" +
    "\001\002\000\056\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\031\ufff0\032\160\035\ufff0\040\ufff0" +
    "\044\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\061\ufff0\001\002\000\004" +
    "\040\137\001\002\000\004\034\110\001\002\000\054\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc" +
    "\031\ufffc\035\ufffc\040\ufffc\044\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\061\ufffc\001\002\000\054\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\012\uffee\031\uffee\035\uffee\040\uffee" +
    "\044\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\055\uffee\056\uffee\057\uffee\061\uffee\001\002\000\054" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012" +
    "\ufff3\031\ufff3\035\ufff3\040\ufff3\044\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\061\ufff3\001\002\000\054\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\012\ufffa\031\ufffa\035\ufffa\040" +
    "\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\055\ufffa\056\ufffa\057\ufffa\061\ufffa\001\002\000" +
    "\054\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\012\ufff7\031\ufff7\035\ufff7\040\ufff7\044\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\061\ufff7\001\002\000\046\002\000\004\011\005" +
    "\041\006\010\007\004\010\027\012\030\031\013\040\034" +
    "\044\006\046\016\051\014\052\017\053\042\055\036\056" +
    "\015\057\012\061\037\001\002\000\054\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\031\ufff8\035" +
    "\ufff8\040\ufff8\044\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8\061\ufff8\001" +
    "\002\000\122\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\061\uffb4\001\002\000\022\004\046\005\041" +
    "\006\010\007\004\010\027\012\030\031\013\040\034\001" +
    "\002\000\110\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\066\012\057\013\054\014\062\015\064\016" +
    "\050\017\067\020\052\021\065\022\051\023\060\024\063" +
    "\027\056\030\055\031\uffed\035\uffed\040\uffed\043\061\044" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\055\uffed\056\uffed\057\uffed\061\uffed\001\002\000\054\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb" +
    "\031\ufffb\035\ufffb\040\ufffb\044\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\061\ufffb\001\002\000\054\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\012\ufff5\031\ufff5\035\ufff5\040\ufff5" +
    "\044\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\061\ufff5\001\002\000\022" +
    "\004\046\005\041\006\010\007\004\010\027\012\030\031" +
    "\013\040\034\001\002\000\054\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\012\ufff6\031\ufff6\035\ufff6\040" +
    "\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\055\ufff6\056\ufff6\057\ufff6\061\ufff6\001\002\000" +
    "\056\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\031\ufff2\032\125\035\ufff2\040\ufff2\044\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\061\ufff2\001\002\000\004\040\121\001" +
    "\002\000\054\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\012\ufff9\031\ufff9\035\ufff9\040\ufff9\044\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\061\ufff9\001\002\000\122\002\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\061\uffb7\001" +
    "\002\000\004\040\045\001\002\000\004\002\044\001\002" +
    "\000\004\002\001\001\002\000\022\004\046\005\041\006" +
    "\010\007\004\010\027\012\030\031\013\040\034\001\002" +
    "\000\122\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\061\uffb1\001\002\000\042\011\066\012\057\013" +
    "\054\014\062\015\064\016\050\017\067\020\052\021\065" +
    "\022\051\023\060\024\063\027\056\030\055\043\061\054" +
    "\053\001\002\000\022\004\046\005\041\006\010\007\004" +
    "\010\027\012\030\031\013\040\034\001\002\000\022\004" +
    "\046\005\041\006\010\007\004\010\027\012\030\031\013" +
    "\040\034\001\002\000\022\004\046\005\041\006\010\007" +
    "\004\010\027\012\030\031\013\040\034\001\002\000\022" +
    "\004\046\005\041\006\010\007\004\010\027\012\030\031" +
    "\013\040\034\001\002\000\022\004\046\005\041\006\010" +
    "\007\004\010\027\012\030\031\013\040\034\001\002\000" +
    "\022\004\046\005\041\006\010\007\004\010\027\012\030" +
    "\031\013\040\034\001\002\000\022\004\046\005\041\006" +
    "\010\007\004\010\027\012\030\031\013\040\034\001\002" +
    "\000\022\004\046\005\041\006\010\007\004\010\027\012" +
    "\030\031\013\040\034\001\002\000\022\004\046\005\041" +
    "\006\010\007\004\010\027\012\030\031\013\040\034\001" +
    "\002\000\022\004\046\005\041\006\010\007\004\010\027" +
    "\012\030\031\013\040\034\001\002\000\022\004\046\005" +
    "\041\006\010\007\004\010\027\012\030\031\013\040\034" +
    "\001\002\000\022\004\046\005\041\006\010\007\004\010" +
    "\027\012\030\031\013\040\034\001\002\000\022\004\046" +
    "\005\041\006\010\007\004\010\027\012\030\031\013\040" +
    "\034\001\002\000\022\004\046\005\041\006\010\007\004" +
    "\010\027\012\030\031\013\040\034\001\002\000\022\004" +
    "\046\005\041\006\010\007\004\010\027\012\030\031\013" +
    "\040\034\001\002\000\022\004\046\005\041\006\010\007" +
    "\004\010\027\012\030\031\013\040\034\001\002\000\122" +
    "\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\066\012\057\013\054\014\062\015\064\016\050\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\061\uffbf\001\002\000\122\002\uffc7\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\054\014\062" +
    "\015\064\016\050\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\035\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\061\uffc7\001\002\000\122\002" +
    "\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\066" +
    "\012\057\013\054\014\062\015\064\016\050\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\035\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\061" +
    "\uffbd\001\002\000\122\002\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\035" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\061\uffc3\001\002\000\122\002\uffbb" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\066\012" +
    "\057\013\054\014\062\015\064\016\050\017\067\020\052" +
    "\021\065\022\051\023\uffbb\024\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\061\uffbb" +
    "\001\002\000\122\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\061\uffc4\001\002\000\042\011\066\012" +
    "\057\013\054\014\062\015\064\016\050\017\067\020\052" +
    "\021\065\022\051\023\060\024\063\027\056\030\055\042" +
    "\077\043\061\001\002\000\022\004\046\005\041\006\010" +
    "\007\004\010\027\012\030\031\013\040\034\001\002\000" +
    "\122\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\066\012\057\013\054\014\062\015\064\016\050\017" +
    "\067\020\052\021\065\022\051\023\060\024\063\027\056" +
    "\030\055\031\uffb2\032\uffb2\033\uffb2\035\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\061\044\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\061\uffb2\001\002\000\122\002\uffbc\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\066\012\057\013\054\014" +
    "\062\015\064\016\050\017\067\020\052\021\065\022\051" +
    "\023\uffbc\024\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\061\uffbc\001\002\000\122" +
    "\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\054\014\062\015\064\016\050\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\061\uffc6\001\002\000\122\002\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\066\012\057\013\054\014\062" +
    "\015\064\016\050\017\067\020\052\021\065\022\051\023" +
    "\060\024\063\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\035\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\061\uffba\001\002\000\122\002" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\066" +
    "\012\057\013\054\014\062\015\064\016\050\017\067\020" +
    "\052\021\065\022\051\023\060\024\063\027\056\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\035\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\061" +
    "\uffb9\001\002\000\122\002\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\061\uffc5\001\002\000\042\011\066" +
    "\012\057\013\054\014\062\015\064\016\050\017\067\020" +
    "\052\021\065\022\051\023\060\024\063\027\056\030\055" +
    "\041\107\043\061\001\002\000\004\034\110\001\002\000" +
    "\046\004\011\005\041\006\010\007\004\010\027\012\030" +
    "\031\013\035\112\040\034\044\006\046\016\051\014\052" +
    "\017\053\042\055\036\056\015\057\012\061\037\001\002" +
    "\000\054\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\031\uffe2\035\uffe2\040\uffe2\044\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\061\uffe2\001\002\000\056\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe\031\ufffe\035" +
    "\ufffe\040\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\055\ufffe\056\ufffe\057\ufffe\061" +
    "\ufffe\001\002\000\046\004\011\005\041\006\010\007\004" +
    "\010\027\012\030\031\013\035\114\040\034\044\006\046" +
    "\016\051\014\052\017\053\042\055\036\056\015\057\012" +
    "\061\037\001\002\000\056\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\012\uffff\031\uffff\035\uffff\040\uffff" +
    "\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\055\uffff\056\uffff\057\uffff\061\uffff\001\002" +
    "\000\054\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\012\ufffd\031\ufffd\035\ufffd\040\ufffd\044\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\061\ufffd\001\002\000\122\002\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\066\012\057\013" +
    "\054\014\062\015\064\016\050\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\061\uffc0\001\002" +
    "\000\122\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\066\012\057\013\054\014\062\015\064\016\050" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\061\uffbe\001\002\000\122\002\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\001\002\000" +
    "\022\004\046\005\041\006\010\007\004\010\027\012\030" +
    "\031\013\040\034\001\002\000\042\011\066\012\057\013" +
    "\054\014\062\015\064\016\050\017\067\020\052\021\065" +
    "\022\051\023\060\024\063\027\056\030\055\041\123\043" +
    "\061\001\002\000\056\002\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\012\uffcf\031\uffcf\032\124\035\uffcf\040" +
    "\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\055\uffcf\056\uffcf\057\uffcf\061\uffcf\001\002\000" +
    "\054\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\012\uffce\031\uffce\035\uffce\040\uffce\044\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\uffce\056\uffce" +
    "\057\uffce\061\uffce\001\002\000\054\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\031\ufff1\035\ufff1" +
    "\040\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\061\ufff1\001\002" +
    "\000\042\011\066\012\057\013\054\014\062\015\064\016" +
    "\050\017\067\020\052\021\065\022\051\023\060\024\063" +
    "\027\056\030\055\041\127\043\061\001\002\000\122\002" +
    "\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\035\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\061" +
    "\uffb3\001\002\000\122\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\061\uffc1\001\002\000\004\051\132" +
    "\001\002\000\004\040\133\001\002\000\022\004\046\005" +
    "\041\006\010\007\004\010\027\012\030\031\013\040\034" +
    "\001\002\000\042\011\066\012\057\013\054\014\062\015" +
    "\064\016\050\017\067\020\052\021\065\022\051\023\060" +
    "\024\063\027\056\030\055\041\135\043\061\001\002\000" +
    "\056\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\012\uffe0\031\uffe0\032\136\035\uffe0\040\uffe0\044\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\061\uffe0\001\002\000\054\002\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\031\uffe1" +
    "\035\uffe1\040\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\061\uffe1" +
    "\001\002\000\022\004\046\005\041\006\010\007\004\010" +
    "\027\012\030\031\013\040\034\001\002\000\042\011\066" +
    "\012\057\013\054\014\062\015\064\016\050\017\067\020" +
    "\052\021\065\022\051\023\060\024\063\027\056\030\055" +
    "\041\141\043\061\001\002\000\004\034\142\001\002\000" +
    "\010\035\147\047\145\050\144\001\002\000\054\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\031" +
    "\uffde\035\uffde\040\uffde\044\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\055\uffde\056\uffde\057\uffde\061" +
    "\uffde\001\002\000\004\042\156\001\002\000\022\004\046" +
    "\005\041\006\010\007\004\010\027\012\030\031\013\040" +
    "\034\001\002\000\010\035\151\047\145\050\144\001\002" +
    "\000\054\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\012\uffdc\031\uffdc\035\uffdc\040\uffdc\044\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\061\uffdc\001\002\000\010\035\uffda\047\uffda" +
    "\050\uffda\001\002\000\054\002\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\012\uffdd\031\uffdd\035\uffdd\040\uffdd" +
    "\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\061\uffdd\001\002\000\010" +
    "\035\uffdb\047\uffdb\050\uffdb\001\002\000\042\011\066\012" +
    "\057\013\054\014\062\015\064\016\050\017\067\020\052" +
    "\021\065\022\051\023\060\024\063\027\056\030\055\042" +
    "\154\043\061\001\002\000\052\004\011\005\041\006\010" +
    "\007\004\010\027\012\030\031\013\035\uffd7\040\034\044" +
    "\006\046\016\047\uffd7\050\uffd7\051\014\052\017\053\042" +
    "\055\036\056\015\057\012\061\037\001\002\000\052\004" +
    "\011\005\041\006\010\007\004\010\027\012\030\031\013" +
    "\035\uffd9\040\034\044\006\046\016\047\uffd9\050\uffd9\051" +
    "\014\052\017\053\042\055\036\056\015\057\012\061\037" +
    "\001\002\000\052\004\011\005\041\006\010\007\004\010" +
    "\027\012\030\031\013\035\uffd6\040\034\044\006\046\016" +
    "\047\uffd6\050\uffd6\051\014\052\017\053\042\055\036\056" +
    "\015\057\012\061\037\001\002\000\052\004\011\005\041" +
    "\006\010\007\004\010\027\012\030\031\013\035\uffd8\040" +
    "\034\044\006\046\016\047\uffd8\050\uffd8\051\014\052\017" +
    "\053\042\055\036\056\015\057\012\061\037\001\002\000" +
    "\054\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\031\uffef\035\uffef\040\uffef\044\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef" +
    "\057\uffef\061\uffef\001\002\000\022\004\046\005\041\006" +
    "\010\007\004\010\027\012\030\031\013\040\034\001\002" +
    "\000\042\011\066\012\057\013\054\014\062\015\064\016" +
    "\050\017\067\020\052\021\065\022\051\023\060\024\063" +
    "\027\056\030\055\041\163\043\061\001\002\000\004\034" +
    "\110\001\002\000\054\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\012\uffdf\031\uffdf\035\uffdf\040\uffdf\044" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\061\uffdf\001\002\000\122\002" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\066" +
    "\012\057\013\054\014\062\015\064\016\050\017\067\020" +
    "\052\021\065\022\051\023\060\024\063\027\056\030\055" +
    "\031\uffb8\032\uffb8\033\uffb8\035\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\061\044\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\061" +
    "\uffb8\001\002\000\022\004\046\005\041\006\010\007\004" +
    "\010\027\012\030\031\013\040\034\001\002\000\054\002" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea" +
    "\031\uffea\035\uffea\040\uffea\044\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\057\uffea" +
    "\061\uffea\001\002\000\042\011\066\012\057\013\054\014" +
    "\062\015\064\016\050\017\067\020\052\021\065\022\051" +
    "\023\060\024\063\027\056\030\055\041\171\043\061\001" +
    "\002\000\056\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\012\uffec\031\uffec\032\172\035\uffec\040\uffec\044" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\055\uffec\056\uffec\057\uffec\061\uffec\001\002\000\054\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\031\uffeb\035\uffeb\040\uffeb\044\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\061\uffeb\001\002\000\024\004\046\005\041\006\010\007" +
    "\004\010\027\012\030\031\013\040\034\060\174\001\002" +
    "\000\004\040\200\001\002\000\112\002\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\066\012\057\013\054" +
    "\014\062\015\064\016\050\017\067\020\052\021\065\022" +
    "\051\023\060\024\063\027\056\030\055\031\uffd1\032\176" +
    "\035\uffd1\040\uffd1\043\061\044\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\061\uffd1\001\002\000\054\002\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\012\uffd0\031\uffd0\035\uffd0\040\uffd0" +
    "\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0\001\002\000\004" +
    "\034\110\001\002\000\024\004\202\005\041\006\010\007" +
    "\004\010\027\012\030\031\013\040\034\041\203\001\002" +
    "\000\006\033\211\041\210\001\002\000\046\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\206\027\uffb1\030" +
    "\uffb1\033\uffb1\041\uffb1\043\uffb1\001\002\000\004\034\uffe7" +
    "\001\002\000\044\011\066\012\057\013\054\014\062\015" +
    "\064\016\050\017\067\020\052\021\065\022\051\023\060" +
    "\024\063\027\056\030\055\033\uffe3\041\uffe3\043\061\001" +
    "\002\000\006\033\uffe5\041\uffe5\001\002\000\022\004\046" +
    "\005\041\006\010\007\004\010\027\012\030\031\013\040" +
    "\034\001\002\000\044\011\066\012\057\013\054\014\062" +
    "\015\064\016\050\017\067\020\052\021\065\022\051\023" +
    "\060\024\063\027\056\030\055\033\uffe4\041\uffe4\043\061" +
    "\001\002\000\004\034\uffe8\001\002\000\022\004\202\005" +
    "\041\006\010\007\004\010\027\012\030\031\013\040\034" +
    "\001\002\000\006\033\uffe6\041\uffe6\001\002\000\054\002" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9" +
    "\031\uffe9\035\uffe9\040\uffe9\044\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\061\uffe9\001\002\000\006\034\110\044\215\001\002\000" +
    "\004\040\217\001\002\000\054\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\012\uffd5\031\uffd5\035\uffd5\040" +
    "\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\057\uffd5\061\uffd5\001\002\000" +
    "\022\004\046\005\041\006\010\007\004\010\027\012\030" +
    "\031\013\040\034\001\002\000\042\011\066\012\057\013" +
    "\054\014\062\015\064\016\050\017\067\020\052\021\065" +
    "\022\051\023\060\024\063\027\056\030\055\041\221\043" +
    "\061\001\002\000\004\034\110\001\002\000\056\002\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\031" +
    "\uffd3\035\uffd3\040\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\061\uffd3\001\002\000\022\004\046\005\041\006\010" +
    "\007\004\010\027\012\030\031\013\040\034\001\002\000" +
    "\042\011\066\012\057\013\054\014\062\015\064\016\050" +
    "\017\067\020\052\021\065\022\051\023\060\024\063\027" +
    "\056\030\055\041\225\043\061\001\002\000\004\034\110" +
    "\001\002\000\056\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\012\uffd2\031\uffd2\035\uffd2\040\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\061\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\040\002\042\003\030\004\022\005\024\006" +
    "\017\007\031\010\037\012\025\013\006\014\023\020\034" +
    "\021\032\022\004\023\020\027\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\030\004\022\006\114\007" +
    "\031\010\037\012\025\013\006\014\023\020\034\021\032" +
    "\022\004\023\020\027\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\117\001" +
    "\001\000\004\003\116\001\001\000\004\003\115\001\001" +
    "\000\004\003\105\001\001\000\004\003\104\001\001\000" +
    "\004\003\103\001\001\000\004\003\102\001\001\000\004" +
    "\003\101\001\001\000\004\003\100\001\001\000\004\003" +
    "\075\001\001\000\004\003\074\001\001\000\004\003\073" +
    "\001\001\000\004\003\072\001\001\000\004\003\071\001" +
    "\001\000\004\003\070\001\001\000\004\003\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\110\001\001\000\036\003\030\004\022\005\112\006\017" +
    "\007\031\010\037\012\025\013\006\014\023\020\034\021" +
    "\032\022\004\023\020\027\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\030\004\022\006\114\007" +
    "\031\010\037\012\025\013\006\014\023\020\034\021\032" +
    "\022\004\023\020\027\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\137\001\001\000\002\001\001\000\004\015\142\001\001" +
    "\000\006\016\145\017\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\152\001\001\000\004\017\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\030" +
    "\004\022\005\154\006\017\007\031\010\037\012\025\013" +
    "\006\014\023\020\034\021\032\022\004\023\020\027\021" +
    "\001\001\000\034\003\030\004\022\006\114\007\031\010" +
    "\037\012\025\013\006\014\023\020\034\021\032\022\004" +
    "\023\020\027\021\001\001\000\036\003\030\004\022\005" +
    "\156\006\017\007\031\010\037\012\025\013\006\014\023" +
    "\020\034\021\032\022\004\023\020\027\021\001\001\000" +
    "\034\003\030\004\022\006\114\007\031\010\037\012\025" +
    "\013\006\014\023\020\034\021\032\022\004\023\020\027" +
    "\021\001\001\000\002\001\001\000\004\003\161\001\001" +
    "\000\002\001\001\000\004\011\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\174\001\001\000\004\024\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\212\001" +
    "\001\000\010\003\203\025\200\026\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\203\026\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\217\001\001\000\002\001\001\000\004\011\221\001\001" +
    "\000\002\001\001\000\004\003\223\001\001\000\002\001" +
    "\001\000\004\011\225\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int nodo = 0;
    public AST AST;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        /*System.err.println("Se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo");*/
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), "Error de simbolo " 
                + "\"" + s.value + "\"", s.left, s.right));
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*System.err.println("No se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo"); */
        
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), 
                "Error de simbolo no se pudo recuperar " + "\"" + s.value + "\"", s.left, s.right));
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= _id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println(a.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E ternario E dospuntos E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= parentesisizquierda E parentesisderecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= valorbooleano 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.BOOLEAN),a.toLowerCase()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= string 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.STRING),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.NUMERIC),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.ENTERO),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= not E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Not(opleft,opright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Or(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new And(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E diferenteque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DiferenteQue(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IgualIgual(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgual(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgual(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorQue(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorQue(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= menos E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Negativo(opleft,opright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Potencia(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Modulo(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E division E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Division(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E multiplicacion E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Multiplicacion(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Resta(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Suma(opleft,opright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ACCESO ::= _id EXPRESIONES 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ACCESO ::= _id 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_EXPRESIONES ::= E 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_EXPRESIONES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_EXPRESIONES ::= L_EXPRESIONES coma E 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_EXPRESIONES",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIONES ::= parentesisizquierda parentesisderecha 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONES ::= parentesisizquierda L_EXPRESIONES parentesisderecha 
            {
              LinkedList<Expresion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMPRIMIR ::= _print parentesisizquierda E parentesisderecha puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPRIMIR ::= _print parentesisizquierda E parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= _id igual E puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= _id igual E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE_IF ::= _if parentesisizquierda E parentesisderecha BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE_IF ::= ELSE_IF _else _if parentesisizquierda E parentesisderecha BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_IF ::= ELSE_IF 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_IF ::= ELSE_IF _else BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASO ::= _default dospuntos 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASO ::= _case E dospuntos 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASO ::= _default dospuntos L_SENTENCIAS 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASO ::= _case E dospuntos L_SENTENCIAS 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L_CASOS ::= CASO 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_CASOS ::= L_CASOS CASO 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE_SWITCH ::= llaveizquierda llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE_SWITCH ::= llaveizquierda L_CASOS llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_SWITCH ::= _switch parentesisizquierda E parentesisderecha BLOQUE_SWITCH 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_WHILE ::= _while parentesisizquierda E parentesisderecha BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_DO_WHILE ::= _do BLOQUE _while parentesisizquierda E parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_DO_WHILE ::= _do BLOQUE _while parentesisizquierda E parentesisderecha puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_FOR ::= _for parentesisizquierda E _in E parentesisderecha BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETRO ::= E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETRO ::= _id igual E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_PARAMETROS ::= L_PARAMETROS coma PARAMETRO 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS ::= parentesisizquierda parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS ::= parentesisizquierda L_PARAMETROS parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES ::= _id igual _funcion PARAMETROS BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RETURN ::= _return puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RETURN ::= _return parentesisizquierda E parentesisderecha puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RETURN ::= _return parentesisizquierda E parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= RETURN 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= _continue puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= _continue 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= _break puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= _break 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FUNCIONES 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_DO_WHILE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_SWITCH 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= TERNARIO 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IMPRIMIR 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ASIGNACION 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_SENTENCIAS ::= SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_SENTENCIAS ::= L_SENTENCIAS SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= llaveizquierda llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveizquierda L_SENTENCIAS llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

