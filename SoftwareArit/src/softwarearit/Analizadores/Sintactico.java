
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 21 15:12:52 CST 2020
//----------------------------------------------------

package softwarearit.Analizadores;

import softwarearit.Arbol.Estructura.*;
import softwarearit.Arbol.Expresiones.*;
import softwarearit.Arbol.Expresiones.Logicas.*;
import softwarearit.Arbol.Instrucciones.*;
import softwarearit.Arbol.*;
import softwarearit.Frame.Interfaz;
import java_cup.runtime.*;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 21 15:12:52 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\003\000\002\011" +
    "\005\000\002\011\004\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\012\005\000\002\012\003\000\002" +
    "\013\011\000\002\013\007\000\002\010\007\000\002\010" +
    "\011\000\002\007\005\000\002\007\006\000\002\004\006" +
    "\000\002\004\007\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\026\004\010\005\025\006\007\007\004\010" +
    "\016\012\017\031\011\040\022\044\006\061\023\001\002" +
    "\000\074\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\061\uffdb\001\002\000\034\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\031\ufff6\035\ufff6\040\ufff6\044\ufff6\045\120\061\ufff6\001" +
    "\002\000\004\040\110\001\002\000\074\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\061\uffdc\001\002\000\004\025\101\001\002\000\020\005" +
    "\025\006\007\007\004\010\016\012\017\031\011\040\022" +
    "\001\002\000\032\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\012\ufffc\031\ufffc\035\ufffc\040\ufffc\044\ufffc" +
    "\061\ufffc\001\002\000\032\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\012\ufffa\031\ufffa\035\ufffa\040\ufffa" +
    "\044\ufffa\061\ufffa\001\002\000\030\002\000\004\010\005" +
    "\025\006\007\007\004\010\016\012\017\031\011\040\022" +
    "\044\006\061\023\001\002\000\032\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\031\ufff8\035\ufff8" +
    "\040\ufff8\044\ufff8\061\ufff8\001\002\000\074\002\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\035\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\061\uffda\001\002\000\020\005\025\006\007\007\004" +
    "\010\016\012\017\031\011\040\022\001\002\000\040\011" +
    "\047\012\037\013\035\014\042\015\044\016\032\017\050" +
    "\020\034\021\046\022\033\023\041\024\043\027\040\030" +
    "\036\043\072\001\002\000\032\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\012\ufffb\031\ufffb\035\ufffb\040" +
    "\ufffb\044\ufffb\061\ufffb\001\002\000\020\005\025\006\007" +
    "\007\004\010\016\012\017\031\011\040\022\001\002\000" +
    "\004\040\030\001\002\000\032\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\012\ufff9\031\ufff9\035\ufff9\040" +
    "\ufff9\044\ufff9\061\ufff9\001\002\000\074\002\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\035\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\061\uffdd\001\002\000\004\002\027\001\002\000\004\002" +
    "\001\001\002\000\020\005\025\006\007\007\004\010\016" +
    "\012\017\031\011\040\022\001\002\000\040\011\047\012" +
    "\037\013\035\014\042\015\044\016\032\017\050\020\034" +
    "\021\046\022\033\023\041\024\043\027\040\030\036\041" +
    "\045\001\002\000\020\005\025\006\007\007\004\010\016" +
    "\012\017\031\011\040\022\001\002\000\020\005\025\006" +
    "\007\007\004\010\016\012\017\031\011\040\022\001\002" +
    "\000\020\005\025\006\007\007\004\010\016\012\017\031" +
    "\011\040\022\001\002\000\020\005\025\006\007\007\004" +
    "\010\016\012\017\031\011\040\022\001\002\000\020\005" +
    "\025\006\007\007\004\010\016\012\017\031\011\040\022" +
    "\001\002\000\020\005\025\006\007\007\004\010\016\012" +
    "\017\031\011\040\022\001\002\000\020\005\025\006\007" +
    "\007\004\010\016\012\017\031\011\040\022\001\002\000" +
    "\020\005\025\006\007\007\004\010\016\012\017\031\011" +
    "\040\022\001\002\000\020\005\025\006\007\007\004\010" +
    "\016\012\017\031\011\040\022\001\002\000\020\005\025" +
    "\006\007\007\004\010\016\012\017\031\011\040\022\001" +
    "\002\000\020\005\025\006\007\007\004\010\016\012\017" +
    "\031\011\040\022\001\002\000\034\002\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\012\uffef\031\uffef\032\054" +
    "\035\uffef\040\uffef\044\uffef\061\uffef\001\002\000\020\005" +
    "\025\006\007\007\004\010\016\012\017\031\011\040\022" +
    "\001\002\000\020\005\025\006\007\007\004\010\016\012" +
    "\017\031\011\040\022\001\002\000\020\005\025\006\007" +
    "\007\004\010\016\012\017\031\011\040\022\001\002\000" +
    "\074\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\047\012\037\013\035\014\042\015\044\016\032\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\035\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\061\uffe5\001\002\000\074\002\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\035\014\042\015\044\016\032\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\035\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\061\uffed\001\002\000\074\002\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\047\012\037\013\035" +
    "\014\042\015\044\016\032\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\035\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\061" +
    "\uffe3\001\002\000\032\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\031\uffee\035\uffee\040\uffee\044" +
    "\uffee\061\uffee\001\002\000\074\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\035" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\061\uffe9" +
    "\001\002\000\074\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\047\012\037\013\035\014\042\015\044" +
    "\016\032\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\061\uffe1\001\002\000" +
    "\074\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\035\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\061\uffea\001\002\000\074\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\047\012" +
    "\037\013\035\014\042\015\044\016\032\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\035\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\061\uffe2\001\002\000\074\002\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\047\012\037\013\035" +
    "\014\042\015\044\016\032\017\050\020\034\021\046\022" +
    "\033\023\041\024\043\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\035\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\061" +
    "\uffe0\001\002\000\074\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\035\014\042\015" +
    "\044\016\032\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\027\uffec\030\uffec\031\uffec\032\uffec\035\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\061\uffec\001\002" +
    "\000\074\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\047\012\037\013\035\014\042\015\044\016\032" +
    "\017\050\020\034\021\046\022\033\023\041\024\043\027" +
    "\040\030\uffdf\031\uffdf\032\uffdf\035\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\061\uffdf\001\002\000\074\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\035\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\061\uffeb\001\002\000\074\002\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\047\012\037\013" +
    "\035\014\042\015\044\016\032\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\035\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\061\uffe6\001\002\000\074\002\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\047\012\037\013\035\014\042" +
    "\015\044\016\032\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\035\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\061\uffe4\001" +
    "\002\000\074\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\061\uffe8\001\002\000\040" +
    "\011\047\012\037\013\035\014\042\015\044\016\032\017" +
    "\050\020\034\021\046\022\033\023\041\024\043\027\040" +
    "\030\036\041\071\001\002\000\074\002\uffd9\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\035\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\061" +
    "\uffd9\001\002\000\020\005\025\006\007\007\004\010\016" +
    "\012\017\031\011\040\022\001\002\000\040\011\047\012" +
    "\037\013\035\014\042\015\044\016\032\017\050\020\034" +
    "\021\046\022\033\023\041\024\043\027\040\030\036\042" +
    "\074\001\002\000\020\005\025\006\007\007\004\010\016" +
    "\012\017\031\011\040\022\001\002\000\064\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\047\012\037" +
    "\013\035\014\042\015\044\016\032\017\050\020\034\021" +
    "\046\022\033\023\041\024\043\027\040\030\036\031\ufff3" +
    "\035\ufff3\040\ufff3\044\ufff3\061\ufff3\001\002\000\074\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\035\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\061\uffe7\001\002\000\032\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\031\ufffd\035" +
    "\ufffd\040\ufffd\044\ufffd\061\ufffd\001\002\000\074\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\047\012" +
    "\037\013\035\014\042\015\044\016\032\017\050\020\034" +
    "\021\046\022\033\023\041\024\043\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\061\uffde\001\002\000\020\005\025\006\007\007" +
    "\004\010\016\012\017\031\011\040\022\001\002\000\070" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\047\012\037\013\035\014\042\015\044\016\032\017\050" +
    "\020\034\021\046\022\033\023\041\024\043\027\040\030" +
    "\036\031\ufff1\032\104\035\ufff1\040\ufff1\043\103\044\ufff1" +
    "\061\ufff1\001\002\000\020\005\025\006\007\007\004\010" +
    "\016\012\017\031\011\040\022\001\002\000\032\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\031" +
    "\ufff0\035\ufff0\040\ufff0\044\ufff0\061\ufff0\001\002\000\040" +
    "\011\047\012\037\013\035\014\042\015\044\016\032\017" +
    "\050\020\034\021\046\022\033\023\041\024\043\027\040" +
    "\030\036\042\106\001\002\000\020\005\025\006\007\007" +
    "\004\010\016\012\017\031\011\040\022\001\002\000\064" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\047\012\037\013\035\014\042\015\044\016\032\017\050" +
    "\020\034\021\046\022\033\023\041\024\043\027\040\030" +
    "\036\031\ufff2\035\ufff2\040\ufff2\044\ufff2\061\ufff2\001\002" +
    "\000\020\005\025\006\007\007\004\010\016\012\017\031" +
    "\011\040\022\001\002\000\040\011\047\012\037\013\035" +
    "\014\042\015\044\016\032\017\050\020\034\021\046\022" +
    "\033\023\041\024\043\027\040\030\036\041\112\001\002" +
    "\000\004\034\113\001\002\000\030\004\010\005\025\006" +
    "\007\007\004\010\016\012\017\031\011\035\115\040\022" +
    "\044\006\061\023\001\002\000\034\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\031\ufff4\035\ufff4" +
    "\040\ufff4\044\ufff4\045\ufff4\061\ufff4\001\002\000\034\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe" +
    "\031\ufffe\035\ufffe\040\ufffe\044\ufffe\045\ufffe\061\ufffe\001" +
    "\002\000\030\004\010\005\025\006\007\007\004\010\016" +
    "\012\017\031\011\035\117\040\022\044\006\061\023\001" +
    "\002\000\034\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\012\uffff\031\uffff\035\uffff\040\uffff\044\uffff\045" +
    "\uffff\061\uffff\001\002\000\006\034\113\044\121\001\002" +
    "\000\004\040\123\001\002\000\032\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\031\ufff7\035\ufff7" +
    "\040\ufff7\044\ufff7\061\ufff7\001\002\000\020\005\025\006" +
    "\007\007\004\010\016\012\017\031\011\040\022\001\002" +
    "\000\040\011\047\012\037\013\035\014\042\015\044\016" +
    "\032\017\050\020\034\021\046\022\033\023\041\024\043" +
    "\027\040\030\036\041\125\001\002\000\004\034\113\001" +
    "\002\000\034\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\012\ufff5\031\ufff5\035\ufff5\040\ufff5\044\ufff5\045" +
    "\ufff5\061\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\024\002\025\003\017\004\012\005\013\006" +
    "\011\007\020\010\023\012\014\013\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\017\004\012\006" +
    "\076\007\020\010\023\012\014\013\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\030\001\001" +
    "\000\002\001\001\000\004\003\066\001\001\000\004\003" +
    "\065\001\001\000\004\003\064\001\001\000\004\003\063" +
    "\001\001\000\004\003\062\001\001\000\004\003\061\001" +
    "\001\000\004\003\060\001\001\000\004\003\057\001\001" +
    "\000\004\003\056\001\001\000\004\003\055\001\001\000" +
    "\004\003\054\001\001\000\002\001\001\000\004\003\052" +
    "\001\001\000\004\003\051\001\001\000\004\003\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\072\001\001\000\002\001" +
    "\001\000\004\003\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\101\001\001\000\002\001\001\000\004\003\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\106\001" +
    "\001\000\002\001\001\000\004\003\110\001\001\000\002" +
    "\001\001\000\004\011\113\001\001\000\022\003\017\004" +
    "\012\005\115\006\011\007\020\010\023\012\014\013\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\017\004\012\006\076\007\020\010\023\012\014\013\004" +
    "\001\001\000\002\001\001\000\004\011\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\123\001\001" +
    "\000\002\001\001\000\004\011\125\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int nodo = 0;
    public AST AST;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        /*System.err.println("Se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo");*/
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), "Error de simbolo " 
                + "\"" + s.value + "\"", s.left, s.right));
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*System.err.println("No se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo"); */
        
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), 
                "Error de simbolo no se pudo recuperar " + "\"" + s.value + "\"", s.left, s.right));
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= parentesisizquierda E parentesisderecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= valorbooleano 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.BOOLEAN),a.toLowerCase()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= string 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.STRING),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.NUMERIC),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.ENTERO),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= not E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Not(opleft,opright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E or E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Or(opleft,opright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E and E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E diferenteque E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E igualigual E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E menorigual E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E menorque E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E mayorque E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= menos E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println(op.toString() + " " + a.Valor.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E potencia E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E modulo E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E division E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E multiplicacion E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E menos E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E mas E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPRIMIR ::= _print parentesisizquierda E parentesisderecha puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPRIMIR ::= _print parentesisizquierda E parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= _id igual E puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= _id igual E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TERNARIO ::= _id igual E ternario E dospuntos E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERNARIO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TERNARIO ::= E ternario E dospuntos E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERNARIO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELSE_IF ::= _if parentesisizquierda E parentesisderecha BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELSE_IF ::= ELSE_IF _else _if parentesisizquierda E parentesisderecha BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA_IF ::= ELSE_IF 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA_IF ::= ELSE_IF _else BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= TERNARIO 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IMPRIMIR 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ASIGNACION 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_SENTENCIAS ::= SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_SENTENCIAS ::= L_SENTENCIAS SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= llaveizquierda llavederecha 
            {
              Instruccion RESULT =null;
		 System.out.println("bloque vacio"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveizquierda L_SENTENCIAS llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

