
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 21 16:43:57 CST 2020
//----------------------------------------------------

package softwarearit.Analizadores;

import softwarearit.Arbol.Estructura.*;
import softwarearit.Arbol.Expresiones.*;
import softwarearit.Arbol.Expresiones.Logicas.*;
import softwarearit.Arbol.Instrucciones.*;
import softwarearit.Arbol.*;
import softwarearit.Frame.Interfaz;
import java_cup.runtime.*;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 21 16:43:57 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\011" +
    "\005\000\002\011\004\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\021\011\000\002\021\010" +
    "\000\002\020\007\000\002\014\007\000\002\015\005\000" +
    "\002\015\004\000\002\016\004\000\002\016\003\000\002" +
    "\017\006\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\012\005\000\002\012\003\000\002\013\011" +
    "\000\002\013\007\000\002\010\007\000\002\010\011\000" +
    "\002\007\005\000\002\007\006\000\002\004\006\000\002" +
    "\004\007\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\042\004\012\005\036\006\007\007\004\010" +
    "\024\012\025\031\010\040\031\044\005\046\016\051\013" +
    "\052\015\055\033\056\014\057\011\061\034\001\002\000" +
    "\114\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\035\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\055\uffc8\056\uffc8\057\uffc8\061\uffc8\001\002\000" +
    "\004\040\170\001\002\000\054\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\012\uffe3\031\uffe3\035\uffe3\040" +
    "\uffe3\044\uffe3\045\161\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\055\uffe3\056\uffe3\057\uffe3\061\uffe3\001\002\000" +
    "\114\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\035\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\055\uffc9\056\uffc9\057\uffc9\061\uffc9\001\002\000" +
    "\020\005\036\006\007\007\004\010\024\012\025\031\010" +
    "\040\031\001\002\000\052\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\012\ufff1\031\ufff1\035\ufff1\040\ufff1" +
    "\044\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\061\ufff1\001\002\000\004\025\151" +
    "\001\002\000\004\040\145\001\002\000\052\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\031\ufff2" +
    "\035\ufff2\040\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\055\ufff2\056\ufff2\057\ufff2\061\ufff2\001\002" +
    "\000\004\034\133\001\002\000\004\040\112\001\002\000" +
    "\052\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\012\ufffc\031\ufffc\035\ufffc\040\ufffc\044\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\061\ufffc\001\002\000\052\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\012\ufffa\031\ufffa\035\ufffa\040\ufffa" +
    "\044\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\061\ufffa\001\002\000\052\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\031" +
    "\ufff7\035\ufff7\040\ufff7\044\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\055\ufff7\056\ufff7\057\ufff7\061\ufff7\001" +
    "\002\000\044\002\000\004\012\005\036\006\007\007\004" +
    "\010\024\012\025\031\010\040\031\044\005\046\016\051" +
    "\013\052\015\055\033\056\014\057\011\061\034\001\002" +
    "\000\052\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\031\ufff8\035\ufff8\040\ufff8\044\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\061\ufff8\001\002\000\114\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\035" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\061\uffc7\001\002\000\020\005\036\006\007\007\004" +
    "\010\024\012\025\031\010\040\031\001\002\000\040\011" +
    "\060\012\051\013\046\014\053\015\054\016\043\017\061" +
    "\020\044\021\057\022\045\023\052\024\055\027\050\030" +
    "\047\043\104\001\002\000\052\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\012\ufffb\031\ufffb\035\ufffb\040" +
    "\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\061\ufffb\001\002\000\052\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\031\ufff5\035\ufff5\040\ufff5\044\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\055\ufff5\056\ufff5\057\ufff5\061\ufff5" +
    "\001\002\000\020\005\036\006\007\007\004\010\024\012" +
    "\025\031\010\040\031\001\002\000\052\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\031\ufff6\035" +
    "\ufff6\040\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\055\ufff6\056\ufff6\057\ufff6\061\ufff6\001\002\000" +
    "\054\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\012\ufff4\031\ufff4\032\101\035\ufff4\040\ufff4\044\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\061\ufff4\001\002\000\004\040\041\001\002\000" +
    "\052\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\031\ufff9\035\ufff9\040\ufff9\044\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\061\ufff9\001\002\000\114\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\027\uffca\030\uffca\031\uffca\032\uffca\035\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\055\uffca\056\uffca\057\uffca" +
    "\061\uffca\001\002\000\004\002\040\001\002\000\004\002" +
    "\001\001\002\000\020\005\036\006\007\007\004\010\024" +
    "\012\025\031\010\040\031\001\002\000\040\011\060\012" +
    "\051\013\046\014\053\015\054\016\043\017\061\020\044" +
    "\021\057\022\045\023\052\024\055\027\050\030\047\041" +
    "\056\001\002\000\020\005\036\006\007\007\004\010\024" +
    "\012\025\031\010\040\031\001\002\000\020\005\036\006" +
    "\007\007\004\010\024\012\025\031\010\040\031\001\002" +
    "\000\020\005\036\006\007\007\004\010\024\012\025\031" +
    "\010\040\031\001\002\000\020\005\036\006\007\007\004" +
    "\010\024\012\025\031\010\040\031\001\002\000\020\005" +
    "\036\006\007\007\004\010\024\012\025\031\010\040\031" +
    "\001\002\000\020\005\036\006\007\007\004\010\024\012" +
    "\025\031\010\040\031\001\002\000\020\005\036\006\007" +
    "\007\004\010\024\012\025\031\010\040\031\001\002\000" +
    "\020\005\036\006\007\007\004\010\024\012\025\031\010" +
    "\040\031\001\002\000\020\005\036\006\007\007\004\010" +
    "\024\012\025\031\010\040\031\001\002\000\020\005\036" +
    "\006\007\007\004\010\024\012\025\031\010\040\031\001" +
    "\002\000\020\005\036\006\007\007\004\010\024\012\025" +
    "\031\010\040\031\001\002\000\054\002\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\031\uffdc\032\065" +
    "\035\uffdc\040\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\055\uffdc\056\uffdc\057\uffdc\061\uffdc\001\002" +
    "\000\020\005\036\006\007\007\004\010\024\012\025\031" +
    "\010\040\031\001\002\000\020\005\036\006\007\007\004" +
    "\010\024\012\025\031\010\040\031\001\002\000\020\005" +
    "\036\006\007\007\004\010\024\012\025\031\010\040\031" +
    "\001\002\000\114\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\060\012\051\013\046\014\053\015\054" +
    "\016\043\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\035\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\055\uffd2\056\uffd2\057\uffd2\061\uffd2" +
    "\001\002\000\114\002\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\046\014\053\015\054" +
    "\016\043\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\035\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\055\uffda\056\uffda\057\uffda\061\uffda" +
    "\001\002\000\114\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\060\012\051\013\046\014\053\015\054" +
    "\016\043\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\035\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0" +
    "\001\002\000\052\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\012\uffdb\031\uffdb\035\uffdb\040\uffdb\044\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\061\uffdb\001\002\000\114\002\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\035\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055\uffce\056" +
    "\uffce\057\uffce\061\uffce\001\002\000\114\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\035\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\061\uffd6\001\002\000\114\002\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\035\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\061\uffd7\001\002\000\114\002\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\035\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\061\uffcf\001\002\000\114\002\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\046\014\053\015\054\016\043\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\035\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\061\uffd9\001\002\000\114\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\061\020\044\021\057" +
    "\022\045\023\052\024\055\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\035\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\061\uffcd\001\002\000\114\002\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\061\020\044\021\057" +
    "\022\045\023\052\024\055\027\050\030\uffcc\031\uffcc\032" +
    "\uffcc\035\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\061\uffcc\001\002\000\114\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\035\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\061\uffd8\001\002\000\114\002\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\061\uffd1\001\002\000\114\002\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\035\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\061\uffd3\001\002\000\114\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\035\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\061\uffd5\001\002\000\052\002\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\031\ufff3\035" +
    "\ufff3\040\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\055\ufff3\056\ufff3\057\ufff3\061\ufff3\001\002\000" +
    "\040\011\060\012\051\013\046\014\053\015\054\016\043" +
    "\017\061\020\044\021\057\022\045\023\052\024\055\027" +
    "\050\030\047\041\103\001\002\000\114\002\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\061\uffc6\001\002\000\020\005\036\006\007" +
    "\007\004\010\024\012\025\031\010\040\031\001\002\000" +
    "\040\011\060\012\051\013\046\014\053\015\054\016\043" +
    "\017\061\020\044\021\057\022\045\023\052\024\055\027" +
    "\050\030\047\042\106\001\002\000\020\005\036\006\007" +
    "\007\004\010\024\012\025\031\010\040\031\001\002\000" +
    "\104\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\060\012\051\013\046\014\053\015\054\016\043\017" +
    "\061\020\044\021\057\022\045\023\052\024\055\027\050" +
    "\030\047\031\uffe0\035\uffe0\040\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\061\uffe0\001\002\000\114\002\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\035\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\061\uffd4\001\002\000\052\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\012\ufffd\031\ufffd\035\ufffd\040\ufffd" +
    "\044\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\061\ufffd\001\002\000\020\005\036" +
    "\006\007\007\004\010\024\012\025\031\010\040\031\001" +
    "\002\000\040\011\060\012\051\013\046\014\053\015\054" +
    "\016\043\017\061\020\044\021\057\022\045\023\052\024" +
    "\055\027\050\030\047\041\114\001\002\000\004\034\115" +
    "\001\002\000\010\035\122\047\120\050\117\001\002\000" +
    "\052\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\012\uffed\031\uffed\035\uffed\040\uffed\044\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\055\uffed\056\uffed\057\uffed" +
    "\061\uffed\001\002\000\004\042\131\001\002\000\020\005" +
    "\036\006\007\007\004\010\024\012\025\031\010\040\031" +
    "\001\002\000\010\035\124\047\120\050\117\001\002\000" +
    "\052\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\012\uffeb\031\uffeb\035\uffeb\040\uffeb\044\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\061\uffeb\001\002\000\010\035\uffe9\047\uffe9\050\uffe9\001" +
    "\002\000\052\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\012\uffec\031\uffec\035\uffec\040\uffec\044\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\055\uffec\056\uffec" +
    "\057\uffec\061\uffec\001\002\000\010\035\uffea\047\uffea\050" +
    "\uffea\001\002\000\040\011\060\012\051\013\046\014\053" +
    "\015\054\016\043\017\061\020\044\021\057\022\045\023" +
    "\052\024\055\027\050\030\047\042\127\001\002\000\050" +
    "\004\012\005\036\006\007\007\004\010\024\012\025\031" +
    "\010\035\uffe6\040\031\044\005\046\016\047\uffe6\050\uffe6" +
    "\051\013\052\015\055\033\056\014\057\011\061\034\001" +
    "\002\000\050\004\012\005\036\006\007\007\004\010\024" +
    "\012\025\031\010\035\uffe8\040\031\044\005\046\016\047" +
    "\uffe8\050\uffe8\051\013\052\015\055\033\056\014\057\011" +
    "\061\034\001\002\000\050\004\012\005\036\006\007\007" +
    "\004\010\024\012\025\031\010\035\uffe5\040\031\044\005" +
    "\046\016\047\uffe5\050\uffe5\051\013\052\015\055\033\056" +
    "\014\057\011\061\034\001\002\000\050\004\012\005\036" +
    "\006\007\007\004\010\024\012\025\031\010\035\uffe7\040" +
    "\031\044\005\046\016\047\uffe7\050\uffe7\051\013\052\015" +
    "\055\033\056\014\057\011\061\034\001\002\000\044\004" +
    "\012\005\036\006\007\007\004\010\024\012\025\031\010" +
    "\035\142\040\031\044\005\046\016\051\013\052\015\055" +
    "\033\056\014\057\011\061\034\001\002\000\004\051\135" +
    "\001\002\000\004\040\136\001\002\000\020\005\036\006" +
    "\007\007\004\010\024\012\025\031\010\040\031\001\002" +
    "\000\040\011\060\012\051\013\046\014\053\015\054\016" +
    "\043\017\061\020\044\021\057\022\045\023\052\024\055" +
    "\027\050\030\047\041\140\001\002\000\054\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\012\uffef\031\uffef" +
    "\032\141\035\uffef\040\uffef\044\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\055\uffef\056\uffef\057\uffef\061\uffef" +
    "\001\002\000\052\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\031\ufff0\035\ufff0\040\ufff0\044\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\061\ufff0\001\002\000\054\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe\031\ufffe\035" +
    "\ufffe\040\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\055\ufffe\056\ufffe\057\ufffe\061\ufffe\001" +
    "\002\000\044\004\012\005\036\006\007\007\004\010\024" +
    "\012\025\031\010\035\144\040\031\044\005\046\016\051" +
    "\013\052\015\055\033\056\014\057\011\061\034\001\002" +
    "\000\054\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\012\uffff\031\uffff\035\uffff\040\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\055\uffff\056" +
    "\uffff\057\uffff\061\uffff\001\002\000\020\005\036\006\007" +
    "\007\004\010\024\012\025\031\010\040\031\001\002\000" +
    "\040\011\060\012\051\013\046\014\053\015\054\016\043" +
    "\017\061\020\044\021\057\022\045\023\052\024\055\027" +
    "\050\030\047\041\147\001\002\000\004\034\133\001\002" +
    "\000\052\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\012\uffee\031\uffee\035\uffee\040\uffee\044\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\055\uffee\056\uffee\057" +
    "\uffee\061\uffee\001\002\000\020\005\036\006\007\007\004" +
    "\010\024\012\025\031\010\040\031\001\002\000\110\002" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\060" +
    "\012\051\013\046\014\053\015\054\016\043\017\061\020" +
    "\044\021\057\022\045\023\052\024\055\027\050\030\047" +
    "\031\uffde\032\154\035\uffde\040\uffde\043\153\044\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\055\uffde\056\uffde" +
    "\057\uffde\061\uffde\001\002\000\020\005\036\006\007\007" +
    "\004\010\024\012\025\031\010\040\031\001\002\000\052" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012" +
    "\uffdd\031\uffdd\035\uffdd\040\uffdd\044\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\055\uffdd\056\uffdd\057\uffdd\061" +
    "\uffdd\001\002\000\040\011\060\012\051\013\046\014\053" +
    "\015\054\016\043\017\061\020\044\021\057\022\045\023" +
    "\052\024\055\027\050\030\047\042\156\001\002\000\020" +
    "\005\036\006\007\007\004\010\024\012\025\031\010\040" +
    "\031\001\002\000\104\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\060\012\051\013\046\014\053\015" +
    "\054\016\043\017\061\020\044\021\057\022\045\023\052" +
    "\024\055\027\050\030\047\031\uffdf\035\uffdf\040\uffdf\044" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\061\uffdf\001\002\000\114\002\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\060\012\051" +
    "\013\046\014\053\015\054\016\043\017\061\020\044\021" +
    "\057\022\045\023\052\024\055\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\035\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\061\uffcb\001\002\000\006\034\133\044" +
    "\162\001\002\000\004\040\164\001\002\000\052\002\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\031" +
    "\uffe4\035\uffe4\040\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\055\uffe4\056\uffe4\057\uffe4\061\uffe4\001" +
    "\002\000\020\005\036\006\007\007\004\010\024\012\025" +
    "\031\010\040\031\001\002\000\040\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\061\020\044\021\057" +
    "\022\045\023\052\024\055\027\050\030\047\041\166\001" +
    "\002\000\004\034\133\001\002\000\054\002\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\031\uffe2\035" +
    "\uffe2\040\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\055\uffe2\056\uffe2\057\uffe2\061\uffe2\001" +
    "\002\000\020\005\036\006\007\007\004\010\024\012\025" +
    "\031\010\040\031\001\002\000\040\011\060\012\051\013" +
    "\046\014\053\015\054\016\043\017\061\020\044\021\057" +
    "\022\045\023\052\024\055\027\050\030\047\041\172\001" +
    "\002\000\004\034\133\001\002\000\054\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\031\uffe1\035" +
    "\uffe1\040\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\055\uffe1\056\uffe1\057\uffe1\061\uffe1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\032\002\036\003\025\004\017\005\021\006" +
    "\016\007\026\010\034\012\022\013\005\014\020\020\031" +
    "\021\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\025\004\017\006\110\007\026\010\034\012\022" +
    "\013\005\014\020\020\031\021\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\041\001\001\000\002" +
    "\001\001\000\004\003\077\001\001\000\004\003\076\001" +
    "\001\000\004\003\075\001\001\000\004\003\074\001\001" +
    "\000\004\003\073\001\001\000\004\003\072\001\001\000" +
    "\004\003\071\001\001\000\004\003\070\001\001\000\004" +
    "\003\067\001\001\000\004\003\066\001\001\000\004\003" +
    "\065\001\001\000\002\001\001\000\004\003\063\001\001" +
    "\000\004\003\062\001\001\000\004\003\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\104\001\001\000" +
    "\002\001\001\000\004\003\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\112\001" +
    "\001\000\002\001\001\000\004\015\115\001\001\000\006" +
    "\016\120\017\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\125\001\001\000\004\017\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\025\004\017" +
    "\005\127\006\016\007\026\010\034\012\022\013\005\014" +
    "\020\020\031\021\027\001\001\000\026\003\025\004\017" +
    "\006\110\007\026\010\034\012\022\013\005\014\020\020" +
    "\031\021\027\001\001\000\030\003\025\004\017\005\131" +
    "\006\016\007\026\010\034\012\022\013\005\014\020\020" +
    "\031\021\027\001\001\000\026\003\025\004\017\006\110" +
    "\007\026\010\034\012\022\013\005\014\020\020\031\021" +
    "\027\001\001\000\030\003\025\004\017\005\142\006\016" +
    "\007\026\010\034\012\022\013\005\014\020\020\031\021" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\025\004\017" +
    "\006\110\007\026\010\034\012\022\013\005\014\020\020" +
    "\031\021\027\001\001\000\002\001\001\000\004\003\145" +
    "\001\001\000\002\001\001\000\004\011\147\001\001\000" +
    "\002\001\001\000\004\003\151\001\001\000\002\001\001" +
    "\000\004\003\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\164\001\001\000\002\001\001" +
    "\000\004\011\166\001\001\000\002\001\001\000\004\003" +
    "\170\001\001\000\002\001\001\000\004\011\172\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int nodo = 0;
    public AST AST;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        /*System.err.println("Se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo");*/
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), "Error de simbolo " 
                + "\"" + s.value + "\"", s.left, s.right));
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*System.err.println("No se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo"); */
        
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), 
                "Error de simbolo no se pudo recuperar " + "\"" + s.value + "\"", s.left, s.right));
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= parentesisizquierda E parentesisderecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= valorbooleano 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.BOOLEAN),a.toLowerCase()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= string 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.STRING),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.NUMERIC),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Valor(new Tipo(Tipo.EnumTipo.ENTERO),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= not E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Not(opleft,opright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E or E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Or(opleft,opright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E and E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E diferenteque E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E igualigual E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E menorigual E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E menorque E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E mayorque E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= menos E 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println(op.toString() + " " + a.Valor.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E potencia E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E modulo E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E division E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= E multiplicacion E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E menos E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E mas E 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMPRIMIR ::= _print parentesisizquierda E parentesisderecha puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMPRIMIR ::= _print parentesisizquierda E parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= _id igual E puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= _id igual E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TERNARIO ::= _id igual E ternario E dospuntos E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERNARIO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERNARIO ::= E ternario E dospuntos E 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERNARIO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE_IF ::= _if parentesisizquierda E parentesisderecha BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSE_IF ::= ELSE_IF _else _if parentesisizquierda E parentesisderecha BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_IF ::= ELSE_IF 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_IF ::= ELSE_IF _else BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASO ::= _default dospuntos 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASO ::= _case E dospuntos 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASO ::= _default dospuntos L_SENTENCIAS 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASO ::= _case E dospuntos L_SENTENCIAS 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CASOS ::= CASO 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_CASOS ::= L_CASOS CASO 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE_SWITCH ::= llaveizquierda llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_SWITCH ::= llaveizquierda L_CASOS llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_SWITCH ::= _switch parentesisizquierda E parentesisderecha BLOQUE_SWITCH 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_WHILE ::= _while parentesisizquierda E parentesisderecha BLOQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_DO_WHILE ::= _do BLOQUE _while parentesisizquierda E parentesisderecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_DO_WHILE ::= _do BLOQUE _while parentesisizquierda E parentesisderecha puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= _return 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= _continue 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= _break puntoycoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= _break 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_DO_WHILE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA_SWITCH 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= TERNARIO 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IMPRIMIR 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ASIGNACION 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_SENTENCIAS ::= SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_SENTENCIAS ::= L_SENTENCIAS SENTENCIA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= llaveizquierda llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llaveizquierda L_SENTENCIAS llavederecha 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

