package softwarearit.Analizadores;

import softwarearit.Arbol.Estructura.*;
import softwarearit.Arbol.Expresiones.*;
import softwarearit.Arbol.Expresiones.Logicas.*;
import softwarearit.Arbol.Expresiones.Relacionales.*;
import softwarearit.Arbol.Expresiones.Aritmeticas.*;
import softwarearit.Arbol.Instrucciones.*;
import softwarearit.Arbol.Funcion.*;
import softwarearit.Arbol.*;
import softwarearit.Frame.Interfaz;
import java_cup.runtime.*;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;

parser code
{:
    private int nodo = 0;
    public AST AST;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        /*System.err.println("Se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo");*/
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), "Error de simbolo " 
                + "\"" + s.value + "\"", s.left, s.right));
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*System.err.println("No se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo"); */
        
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), 
                "Error de simbolo no se pudo recuperar " + "\"" + s.value + "\"", s.left, s.right));
    }

:}


action code {:
    
:}

/*terminales reservados*/
terminal String _id;
terminal String entero, decimal, string, valorbooleano;
terminal String mas, menos, multiplicacion, division, modulo, potencia;
terminal String menorque, mayorque,menorigual, mayorigual;
terminal String igualigual, diferenteque, igual, flecha;
terminal String and, or, not;
terminal String puntoycoma, coma, llaveizquierda, llavederecha, corcheteizquierda, corchetederecha; 
terminal String parentesisizquierda, parentesisderecha, dospuntos;
terminal String ternario;
terminal String _if, _else;
terminal String _switch, _case, _default;
terminal String _while, _do;
terminal String _for, _in;
terminal String _break, _continue, _return;
terminal String _funcion;
terminal String _print;
terminal String _null;
//terminal String _c, _list, _matrix, _array;
//terminal String _typeof, _length, _ncol, _nrow, _stringlength, _remove; 
//terminal String _tolowercase, _touppercase, _trunk, _round;
//terminal String _mean, _median, _mode;
//terminal String _pie, _barplot, _plot, _hist;
terminal umenos;


/*
* Aquí están los no terminales
*/
non terminal INICIO;
non terminal Expresion E;
non terminal Instruccion IMPRIMIR;
non terminal LinkedList<Nodo> L_SENTENCIAS;
non terminal Nodo SENTENCIA;
non terminal Instruccion ASIGNACION;
non terminal Instruccion TERNARIO;
non terminal Instruccion BLOQUE;
non terminal Instruccion SENTENCIA_IF;
non terminal LinkedList<Instruccion> ELSE_IF;
non terminal Instruccion SENTENCIA_SWITCH;
non terminal LinkedList<Instruccion> BLOQUE_SWITCH;
non terminal LinkedList<Instruccion> L_CASOS;
non terminal Instruccion CASO;
non terminal Instruccion SENTENCIA_WHILE;
non terminal Instruccion SENTENCIA_DO_WHILE;
non terminal Instruccion SENTENCIA_FOR;
non terminal Instruccion RETURN;
non terminal Instruccion PARAMETROS;
non terminal LinkedList<Instruccion> L_PARAMETROS;
non terminal Instruccion PARAMETRO;
non terminal Instruccion FUNCIONES;
non terminal LinkedList<Expresion> EXPRESIONES;
non terminal LinkedList<Nodo> L_EXPRESIONES;
non terminal Expresion ACCESO;

/* Precedencia */
/*
precedence right ternario, dospuntos;

precedence left or;
precedence left and;
precedence right not;

precedence left menorque, menorigual,mayorque,mayorigual,igualigual,diferenteque;
precedence left mas, menos;
precedence left multiplicacion, division, modulo, potencia;
precedence left umenos;

precedence right parentesisizquierda, parentesisderecha;
*/

precedence right igual;
precedence right ternario, dospuntos;
precedence left or;
precedence left and;
precedence left igualigual, diferenteque;
precedence left menorque, menorigual, mayorque, mayorigual;
precedence left mas, menos;
precedence left multiplicacion, division, modulo, potencia;
precedence right umenos;
precedence left corcheteizquierda, corchetederecha;
precedence right parentesisizquierda, parentesisderecha;
precedence right llaveizquierda, llavederecha;

/* ­­­­­­­­­­­­­­ Declaración de la gramática  ­­­­­­­­­­­ */
start with INICIO; // start with sirve para indicarle al parser con que produccion empezar

INICIO::= L_SENTENCIAS:a {: parser.AST = new AST(a); :}
        ;

BLOQUE::= llaveizquierda L_SENTENCIAS:a llavederecha  {: RESULT = new Bloque(a); :}
        | llaveizquierda llavederecha                 {: RESULT = new Bloque(new LinkedList<>()); :}
        ;

L_SENTENCIAS::= L_SENTENCIAS:a SENTENCIA:b {: RESULT = a; RESULT.add(b); :}
                | SENTENCIA:a              {: RESULT = new LinkedList<>(); RESULT.add(a); :}
                ;

SENTENCIA::= ASIGNACION:a        {: RESULT = a; :}
        | IMPRIMIR:a             {: RESULT = a; :}
        | TERNARIO:a             {: RESULT = a; :}
        | SENTENCIA_IF:a         {: RESULT = a; :}
        | SENTENCIA_SWITCH:a     {: RESULT = a; :}
        | SENTENCIA_WHILE:a      {: RESULT = a; :}
        | SENTENCIA_DO_WHILE:a   {: RESULT = a; :}
        | SENTENCIA_FOR:a        {: RESULT = a; :}
        | FUNCIONES:a            {: RESULT = a; :}
        | _break:a               {: RESULT = new Break(aleft,aright); :}
        | _break:a puntoycoma    {: RESULT = new Break(aleft,aright); :}
        | _continue:a            {: RESULT = new Continue(aleft,aright); :}
        | _continue:a puntoycoma {: RESULT = new Continue(aleft,aright); :}
        | RETURN:a               {: RESULT = a; :}
        | error puntoycoma
        | error llavederecha
        ;

RETURN::= _return:op parentesisizquierda E:e parentesisderecha              {: RESULT = new Return(opleft,opright,e); :}
        | _return:op parentesisizquierda E:e parentesisderecha puntoycoma   {: RESULT = new Return(opleft,opright,e); :}
        | _return:op puntoycoma                                             {: RESULT = new Return(opleft,opright);   :}
        | _return:op                                                        {: RESULT = new Return(opleft,opright);   :}
        ;
        
FUNCIONES::= _id igual _funcion PARAMETROS BLOQUE 
        | _id igual parentesisizquierda E parentesisderecha flecha BLOQUE
        | _id igual parentesisizquierda _id coma L_PARAMETROS parentesisderecha flecha BLOQUE
        | _id igual parentesisizquierda _id igual E coma L_PARAMETROS parentesisderecha flecha BLOQUE
        | _id igual parentesisizquierda _id igual E parentesisderecha flecha BLOQUE
        ;    

PARAMETROS::= parentesisizquierda L_PARAMETROS parentesisderecha
        | parentesisizquierda parentesisderecha
        ;

L_PARAMETROS::= L_PARAMETROS coma PARAMETRO
        | PARAMETRO
        ;

PARAMETRO::= _id igual E
        | E
        ;

SENTENCIA_FOR::= _for parentesisizquierda E _in E parentesisderecha BLOQUE
        ;
    
SENTENCIA_DO_WHILE::= _do BLOQUE:b _while:a parentesisizquierda E:cond parentesisderecha puntoycoma  {: RESULT = new Do(aleft,aright,cond,b); :}
                | _do BLOQUE:b _while:a parentesisizquierda E:cond parentesisderecha                 {: RESULT = new Do(aleft,aright,cond,b); :}
                ;

SENTENCIA_WHILE::= _while parentesisizquierda E:e1 parentesisderecha BLOQUE:b {: RESULT = new While(e1,b); :}
                ;

SENTENCIA_SWITCH::= _switch parentesisizquierda E:es parentesisderecha BLOQUE_SWITCH:bs {: RESULT = new Switch(es,bs); :}
                ;

BLOQUE_SWITCH::= llaveizquierda L_CASOS:a llavederecha {: RESULT = a; :}
                | llaveizquierda llavederecha          {: RESULT = new LinkedList<>(); :}
                ;

L_CASOS::= L_CASOS:a CASO:b  {: RESULT = a; RESULT.add(b); :}
        | CASO:a             {: RESULT = new LinkedList<>(); RESULT.add(a); :}
        ;

CASO::=   _case:op E:e1 dospuntos L_SENTENCIAS:b {: RESULT = new CasoSwitch(opleft,opright,e1,new Bloque(b)); :}
        | _case:op E:e1 dospuntos                {: RESULT = new CasoSwitch(opleft,opright,e1); :}
        | _default:op dospuntos L_SENTENCIAS:b   {: RESULT = new CasoSwitch(opleft,opright,new Bloque(b)); :}
        | _default:op dospuntos                  {: RESULT = new CasoSwitch(opleft,opright); :}
        ;

SENTENCIA_IF::= ELSE_IF:a _else BLOQUE:b {: RESULT = new If(a,b); :}
        | ELSE_IF:a                      {: RESULT = new If(a); :}
        ;

ELSE_IF::= ELSE_IF:a _else _if:op parentesisizquierda E:b parentesisderecha BLOQUE:c {: RESULT = a; RESULT.add(new BloqueIf(opleft,opright,b,c)); :}
        | _if:op parentesisizquierda E:a parentesisderecha BLOQUE:b                  {: RESULT = new LinkedList<>(); RESULT.add(new BloqueIf(opleft,opright,a,b)); :}
        ;

ASIGNACION::= _id:ide igual:op E:exp        {:RESULT = new Asignacion(opleft,opright,ide,exp); :}
        | _id:ide igual:op E:exp puntoycoma {:RESULT = new Asignacion(opleft,opright,ide,exp); :}
        ;

IMPRIMIR::= _print:op parentesisizquierda E:a parentesisderecha          {: RESULT = new Print(opleft,opright,a); :}
        | _print:op parentesisizquierda E:a parentesisderecha puntoycoma {: RESULT = new Print(opleft,opright,a); :}
        ;



L_EXPRESIONES ::= L_EXPRESIONES:a coma E:b {: RESULT = a; RESULT.add(b); :}
        | E:a                              {: RESULT = new LinkedList<>(); RESULT.add(a); :}
        ;

E::=    E:a mas:op E:b               {: RESULT = new Suma(opleft,opright,a,b); :}
        | E:a menos:op E:b           {: RESULT = new Resta(opleft,opright,a,b); :}
        | E:a multiplicacion:op E:b  {: RESULT = new Multiplicacion(opleft,opright,a,b); :}
        | E:a division:op E:b        {: RESULT = new Division(opleft,opright,a,b); :}
        | E:a modulo:op E:b          {: RESULT = new Modulo(opleft,opright,a,b); :}
        | E:a potencia:op E:b        {: RESULT = new Potencia(opleft,opright,a,b); :}
        | menos:op E:a               {: RESULT = new Negativo(opleft,opright,a); :} %prec umenos

        | E:a mayorque:op E:b         {: RESULT = new MayorQue(opleft,opright,a,b); :}
        | E:a menorque:op E:b         {: RESULT = new MenorQue(opleft,opright,a,b); :}
        | E:a mayorigual:op E:b       {: RESULT = new MayorIgual(opleft,opright,a,b); :}
        | E:a menorigual:op E:b       {: RESULT = new MenorIgual(opleft,opright,a,b); :}
        | E:a igualigual:op E:b       {: RESULT = new IgualIgual(opleft,opright,a,b); :}
        | E:a diferenteque:op E:b     {: RESULT = new DiferenteQue(opleft,opright,a,b); :}

        | E:a and:op E:b {: RESULT = new And(opleft,opright,a,b); :}
        | E:a or:op E:b  {: RESULT = new Or(opleft,opright,a,b); :}
        | not:op E:a     {: RESULT = new Not(opleft,opright,a); :}

        | entero:a                                  {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.ENTERO),a); :}
        | decimal:a                                 {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.NUMERIC),a); :}
        | string:a                                  {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.STRING),a); :} 
        | valorbooleano:a                           {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.BOOLEAN),a.toLowerCase()); :}
        | _null:a                                   {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.NULL),a); :}
        | parentesisizquierda E:a parentesisderecha {: RESULT = a; :}
        
        | E:a ternario:op E:v dospuntos E:f {: RESULT = new Ternario(opleft,opright,a,v,f); :}


        // TODO terminar con llamada de variables y funciones
        
        | _id:a                                                         {: RESULT = new Acceso(aleft,aright,a); :}
        | _id:a parentesisizquierda parentesisderecha                  
        | _id:a parentesisizquierda L_EXPRESIONES:le parentesisderecha  {: RESULT = FactoryFunction.getFunctionEstructura(a,le); :}
        ;



// TODO producciones con problemas
EXPRESIONES ::= parentesisizquierda L_EXPRESIONES parentesisderecha
        | parentesisizquierda  parentesisderecha
        ;

ACCESO ::= _id
        | _id EXPRESIONES
        ;