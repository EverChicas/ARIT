package softwarearit.Analizadores;

import softwarearit.Arbol.Estructura.*;
import softwarearit.Arbol.Expresiones.*;
import softwarearit.Arbol.Expresiones.Logicas.*;
import softwarearit.Arbol.Expresiones.Relacionales.*;
import softwarearit.Arbol.Expresiones.Aritmeticas.*;
import softwarearit.Arbol.Instrucciones.*;
import softwarearit.Arbol.*;
import softwarearit.Frame.Interfaz;
import java_cup.runtime.*;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;

parser code
{:
    private int nodo = 0;
    public AST AST;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        /*System.err.println("Se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo");*/
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), "Error de simbolo " 
                + "\"" + s.value + "\"", s.left, s.right));
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*System.err.println("No se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo"); */
        
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), 
                "Error de simbolo no se pudo recuperar " + "\"" + s.value + "\"", s.left, s.right));
    }

:}


action code {:
    
:}

/*terminales reservados*/
terminal String _id;
terminal String entero, decimal, string, valorbooleano;
terminal String mas, menos, multiplicacion, division, modulo, potencia;
terminal String menorque, mayorque,menorigual, mayorigual;
terminal String igualigual, diferenteque, igual, flecha;
terminal String and, or, not;
terminal String puntoycoma, coma, llaveizquierda, llavederecha, corcheteizquierda, corchetederecha; 
terminal String parentesisizquierda, parentesisderecha, dospuntos;
terminal String ternario;
terminal String _if, _else;
terminal String _switch, _case, _default;
terminal String _while, _do;
terminal String _for, _in;
terminal String _break, _continue, _return;
terminal String _funcion;
terminal String _print;
terminal String _c, _list, _matrix, _array;
terminal String _typeof, _length, _ncol, _nrow, _stringlength, _remove; 
terminal String _tolowercase, _touppercase, _trunk, _round;
terminal String _mean, _median, _mode;
terminal String _null;
terminal String _pie, _barplot, _plot, _hist;
terminal umenos;


/*
* Aquí están los no terminales
*/
non terminal INICIO;
non terminal Expresion E;
non terminal Instruccion IMPRIMIR;
non terminal LinkedList<Instruccion> L_SENTENCIAS;
non terminal Instruccion SENTENCIA;
non terminal Instruccion ASIGNACION;
non terminal Instruccion TERNARIO;
non terminal Instruccion BLOQUE;
non terminal Instruccion SENTENCIA_IF;
non terminal LinkedList<Instruccion> ELSE_IF;
non terminal Instruccion SENTENCIA_SWITCH;
non terminal Instruccion BLOQUE_SWITCH;
non terminal LinkedList<Instruccion> L_CASOS;
non terminal Instruccion CASO;
non terminal Instruccion SENTENCIA_WHILE;
non terminal Instruccion SENTENCIA_DO_WHILE;
non terminal Instruccion SENTENCIA_FOR;
non terminal Instruccion RETURN;
non terminal Instruccion PARAMETROS;
non terminal LinkedList<Instruccion> L_PARAMETROS;
non terminal Instruccion PARAMETRO;
non terminal Instruccion FUNCIONES;
non terminal LinkedList<Expresion> EXPRESIONES;
non terminal LinkedList<Expresion> L_EXPRESIONES;
non terminal Expresion ACCESO;

/* Precedencia */
/*
precedence right ternario, dospuntos;

precedence left or;
precedence left and;
precedence right not;

precedence left menorque, menorigual,mayorque,mayorigual,igualigual,diferenteque;
precedence left mas, menos;
precedence left multiplicacion, division, modulo, potencia;
precedence left umenos;

precedence right parentesisizquierda, parentesisderecha;
*/

precedence right igual;
precedence right ternario, dospuntos;
precedence left or;
precedence left and;
precedence left igualigual, diferenteque;
precedence left menorque, menorigual, mayorque, mayorigual;
precedence left mas, menos;
precedence left multiplicacion, division, modulo, potencia;
precedence right umenos;
precedence left corcheteizquierda, corchetederecha;
precedence right parentesisizquierda, parentesisderecha;
precedence right llaveizquierda, llavederecha;

/* ­­­­­­­­­­­­­­ Declaración de la gramática  ­­­­­­­­­­­ */
start with INICIO; // start with sirve para indicarle al parser con que produccion empezar

INICIO::= L_SENTENCIAS;

BLOQUE::= llaveizquierda L_SENTENCIAS llavederecha
        | llaveizquierda llavederecha 
        ;

L_SENTENCIAS::= L_SENTENCIAS SENTENCIA
                | SENTENCIA
                ;

SENTENCIA::= ASIGNACION
        | IMPRIMIR
        | TERNARIO
        | SENTENCIA_IF
        | SENTENCIA_SWITCH
        | SENTENCIA_WHILE
        | SENTENCIA_DO_WHILE
        | SENTENCIA_FOR
        | FUNCIONES
        | _break
        | _break puntoycoma
        | _continue
        | _continue puntoycoma
        | RETURN
        | E
        ;

RETURN::= _return parentesisizquierda E parentesisderecha
        | _return parentesisizquierda E parentesisderecha puntoycoma
        | _return puntoycoma
        ;
        
FUNCIONES::= _id igual _funcion PARAMETROS BLOQUE 
        ;    

PARAMETROS::= parentesisizquierda L_PARAMETROS parentesisderecha
        | parentesisizquierda parentesisderecha
        ;

L_PARAMETROS::= L_PARAMETROS coma PARAMETRO
        | PARAMETRO
        ;

PARAMETRO::= _id igual E
        | E
        ;

SENTENCIA_FOR::= _for parentesisizquierda E _in E parentesisderecha BLOQUE
        ;
    
SENTENCIA_DO_WHILE::= _do BLOQUE _while parentesisizquierda E parentesisderecha puntoycoma
                | _do BLOQUE _while parentesisizquierda E parentesisderecha
                ;

SENTENCIA_WHILE::= _while parentesisizquierda E parentesisderecha BLOQUE
                ;

SENTENCIA_SWITCH::= _switch parentesisizquierda E parentesisderecha BLOQUE_SWITCH
                ;

BLOQUE_SWITCH::= llaveizquierda L_CASOS llavederecha
                | llaveizquierda llavederecha
                ;

L_CASOS::= L_CASOS CASO
        | CASO
        ;

CASO::= _case E dospuntos L_SENTENCIAS
        | _default dospuntos L_SENTENCIAS
        | _case E dospuntos  
        | _default dospuntos 
        ;

SENTENCIA_IF::= ELSE_IF _else BLOQUE
        | ELSE_IF
        ;

ELSE_IF::= ELSE_IF _else _if parentesisizquierda E parentesisderecha BLOQUE
        | _if parentesisizquierda E parentesisderecha BLOQUE
        ;

ASIGNACION::= _id igual E
        | _id igual E puntoycoma
        ;

IMPRIMIR::= _print parentesisizquierda E parentesisderecha
        | _print parentesisizquierda E parentesisderecha puntoycoma
        ;

    // TODO producciones con problemas

EXPRESIONES ::= parentesisizquierda L_EXPRESIONES parentesisderecha
        | parentesisizquierda  parentesisderecha
        ;

L_EXPRESIONES ::= L_EXPRESIONES coma E
        | E
        ;

ACCESO ::= _id
        | _id EXPRESIONES
        ;

E::=    E:a mas:op E:b               {: RESULT = new Suma(opleft,opright,a,b); :}
        | E:a menos:op E:b           {: RESULT = new Resta(opleft,opright,a,b); :}
        | E:a multiplicacion:op E:b  {: RESULT = new Multiplicacion(opleft,opright,a,b); :}
        | E:a division:op E:b        {: RESULT = new Division(opleft,opright,a,b); :}
        | E:a modulo:op E:b          {: RESULT = new Modulo(opleft,opright,a,b); :}
        | E:a potencia:op E:b        {: RESULT = new Potencia(opleft,opright,a,b); :}
        | menos:op E:a               {: RESULT = new Negativo(opleft,opright,a); :} %prec umenos

        | E:a mayorque:op E:b         {: RESULT = new MayorQue(opleft,opright,a,b); :}
        | E:a menorque:op E:b         {: RESULT = new MenorQue(opleft,opright,a,b); :}
        | E:a mayorigual:op E:b       {: RESULT = new MayorIgual(opleft,opright,a,b); :}
        | E:a menorigual:op E:b       {: RESULT = new MenorIgual(opleft,opright,a,b); :}
        | E:a igualigual:op E:b       {: RESULT = new IgualIgual(opleft,opright,a,b); :}
        | E:a diferenteque:op E:b     {: RESULT = new DiferenteQue(opleft,opright,a,b); :}

        | E:a and:op E:b {: RESULT = new And(opleft,opright,a,b); :}
        | E:a or:op E:b  {: RESULT = new Or(opleft,opright,a,b); :}
        | not:op E:a     {: RESULT = new Not(opleft,opright,a); :}

        | entero:a                                  {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.ENTERO),a); :}
        | decimal:a                                 {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.NUMERIC),a); :}
        | string:a                                  {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.STRING),a); :} 
        | valorbooleano:a                           {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.BOOLEAN),a.toLowerCase()); :}
        | parentesisizquierda E:a parentesisderecha {: RESULT = a; :}
        
        | E ternario E dospuntos E


        // TODO terminar con llamada de variables y funciones
        //| ACCESO
        | _id:a {: System.out.println(a.toString()); :}
        //| _id EXPRESIONES
        // TODO funciones nativas
        //| _c EXPRESIONES
        ;
