package softwarearit.Analizadores;

import softwarearit.Arbol.Estructura.*;
import softwarearit.Arbol.Expresiones.*;
import softwarearit.Arbol.Expresiones.Logicas.*;
import softwarearit.Arbol.Instrucciones.*;
import softwarearit.Arbol.*;
import softwarearit.Frame.Interfaz;
import java_cup.runtime.*;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;

parser code
{:
    private int nodo = 0;
    public AST AST;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        /*System.err.println("Se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo");*/
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), "Error de simbolo " 
                + "\"" + s.value + "\"", s.left, s.right));
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*System.err.println("No se puede recuperar de error en la Línea: " + s.right 
        + " Columna: "+ s.left + ". Identificador: " +s.value + " Error de simbolo"); */
        
        softwarearit.Frame.Interfaz.addError(
            new NodoError(
                new TipoError(TipoError.EnumTipoError.SINTACTICO), 
                "Error de simbolo no se pudo recuperar " + "\"" + s.value + "\"", s.left, s.right));
    }

:}


action code {:
    
:}

/*terminales reservados*/
terminal String _id;
terminal String entero, decimal, string, valorbooleano;
terminal String mas, menos, multiplicacion, division, modulo, potencia;
terminal String menorque, mayorque,menorigual, mayorigual;
terminal String igualigual, diferenteque, igual, flecha;
terminal String and, or, not;
terminal String puntoycoma, coma, llaveizquierda, llavederecha, corcheteizquierda, corchetederecha; 
terminal String parentesisizquierda, parentesisderecha, dospuntos;
terminal String ternario;
terminal String _if, _else;
terminal String _switch, _case, _default;
terminal String _while, _do;
terminal String _for, _in;
terminal String _break, _continue, _return;
terminal String _funcion;
terminal String _print;
terminal String _c, _list, _matrix, _array;
terminal String _typeof, _length, _ncol, _nrow, _stringlength, _remove; 
terminal String _tolowercase, _touppercase, _trunk, _round;
terminal String _mean, _median, _mode;
terminal String _null;
terminal String _pie, _barplot, _plot, _hist;
terminal umenos;


/*
* Aquí están los no terminales
*/
non terminal INICIO;
non terminal Expresion E;
non terminal Instruccion IMPRIMIR;
non terminal LinkedList<Instruccion> L_SENTENCIAS;
non terminal Instruccion SENTENCIA;
non terminal Instruccion ASIGNACION;
non terminal Instruccion TERNARIO;
non terminal Instruccion BLOQUE;
non terminal Instruccion SENTENCIA_IF;
non terminal LinkedList<Instruccion> ELSE_IF;
non terminal Instruccion SENTENCIA_SWITCH;
non terminal Instruccion BLOQUE_SWITCH;
non terminal LinkedList<Instruccion> L_CASOS;
non terminal Instruccion CASO;
non terminal Instruccion SENTENCIA_WHILE;
non terminal Instruccion SENTENCIA_DO_WHILE;


/* Precedencia */
precedence left or;
precedence left and;
precedence right not;

precedence left menorque, menorigual,mayorque,mayorigual,igualigual,diferenteque;
precedence left mas, menos;
precedence left multiplicacion, division, modulo, potencia;
precedence left umenos;


/* ­­­­­­­­­­­­­­ Declaración de la gramática  ­­­­­­­­­­­ */
start with INICIO; // start with sirve para indicarle al parser con que produccion empezar

    INICIO::= L_SENTENCIAS;

    BLOQUE::= llaveizquierda L_SENTENCIAS llavederecha
            | llaveizquierda llavederecha 
            ;

    L_SENTENCIAS::= L_SENTENCIAS SENTENCIA
                        | SENTENCIA
                        ;

    SENTENCIA::= ASIGNACION
                | IMPRIMIR
                | TERNARIO
                | SENTENCIA_IF
                | SENTENCIA_SWITCH
                | SENTENCIA_WHILE
                | SENTENCIA_DO_WHILE
                | _break
                | _break puntoycoma
                | _continue
                | _return
                ;
    
    SENTENCIA_DO_WHILE::= _do BLOQUE _while parentesisizquierda E parentesisderecha puntoycoma
                        | _do BLOQUE _while parentesisizquierda E parentesisderecha
                        ;

    SENTENCIA_WHILE::= _while parentesisizquierda E parentesisderecha BLOQUE
                        ;

    SENTENCIA_SWITCH::= _switch parentesisizquierda E parentesisderecha BLOQUE_SWITCH
                        ;

    BLOQUE_SWITCH::= llaveizquierda L_CASOS llavederecha
                    | llaveizquierda llavederecha
                    ;

    L_CASOS::= L_CASOS CASO
            | CASO
            ;

    CASO::= _case E dospuntos L_SENTENCIAS
            | _default dospuntos L_SENTENCIAS
            | _case E dospuntos  
            | _default dospuntos 
            ;

    SENTENCIA_IF::= ELSE_IF _else BLOQUE
            | ELSE_IF
            ;

    ELSE_IF::= ELSE_IF _else _if parentesisizquierda E parentesisderecha BLOQUE
            | _if parentesisizquierda E parentesisderecha BLOQUE
            ;

    TERNARIO::= E ternario E dospuntos E
                | _id igual E ternario E dospuntos E
                ;

    ASIGNACION::= _id igual E
                | _id igual E puntoycoma
                ;

    IMPRIMIR::= _print parentesisizquierda E parentesisderecha
                | _print parentesisizquierda E parentesisderecha puntoycoma
                ;

    E::=  E mas E              //{:  :}
        | E menos E            //{:  :}
        | E multiplicacion E   //{:  :}
        | E division E         //{:  :}
        | E modulo E           //{:  :}
        | E potencia E         //{:  :}
        | menos:op E:a       {: System.out.println(op.toString() + " " + a.Valor.toString()); :} %prec umenos

        | E mayorque E         //{:  :}
        | E menorque E         //{:  :}
        | E mayorigual E       //{:  :}
        | E menorigual E       //{:  :}
        | E igualigual E       //{:  :}
        | E diferenteque E     //{:  :}

        | E and E              //{:  :}
        | E or:op E:a  {: RESULT = new Or(opleft,opright,a); :}
        | not:op E:a   {: RESULT = new Not(opleft,opright,a); :}

        | entero:a                                  {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.ENTERO),a); :}
        | decimal:a                                 {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.NUMERIC),a); :}
        | string:a                                  {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.STRING),a); :} 
        | valorbooleano:a                           {: RESULT = new Valor(new Tipo(Tipo.EnumTipo.BOOLEAN),a.toLowerCase()); :}
        | parentesisizquierda E:a parentesisderecha {: RESULT = a; :}
        
        // TODO terminar de poner acceso a id 
        ;
